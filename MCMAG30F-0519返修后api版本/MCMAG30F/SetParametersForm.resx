<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAoAAA
        APAAAAD+AAAA/gAAAPAAAACgAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAA
        AKoAAAD/AAAA8gAAAOMAAADjAAAA8gAAAP8AAACqAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAABcAAAASAAAAAAAA
        AAAAAABJAAAA+wAAAM4AAABAAAAAIAAAACAAAABAAAAAzgAAAPsAAABJAAAAAAAAAAAAAAASAAAAFwAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQAAACmAAAA2AAA
        ANAAAACEAAAAQAAAAKwAAAD/AAAAbQAAAAAAAAAAAAAAAAAAAAAAAABtAAAA/wAAAKwAAABAAAAAhAAA
        ANAAAADYAAAApgAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AAAA2gAA
        AP8AAADsAAAA7gAAAP8AAAD4AAAA/wAAAOcAAAAzAAAAAAAAAAAAAAAAAAAAAAAAADMAAADnAAAA/wAA
        APgAAAD/AAAA7gAAAOwAAAD/AAAA2gAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAA
        ANoAAAD/AAAAqAAAAC0AAAAyAAAAmwAAANcAAACSAAAAPQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        AD0AAACSAAAA2AAAAJsAAAAyAAAALQAAAKgAAAD/AAAA2gAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAUAAACnAAAA/wAAAKgAAAATAAAAAAAAAAAAAAAFAAAAGAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAZAAAABQAAAAAAAAAAAAAAEwAAAKgAAAD/AAAApwAAAAUAAAAAAAAAAAAA
        AAAAAAAAAAAAFwAAANkAAADsAAAALQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAAAOwAAADZAAAAFwAA
        AAAAAAAAAAAAAAAAAAAAAAASAAAA0AAAAO4AAAAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyAAAA7gAA
        ANAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFAAAA/wAAAJoAAAAFAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAA
        AJsAAAD/AAAAhQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAD4AAAA1wAAABgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAABkAAAAZAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAYAAAA1wAAAPgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAABJAAAArAAAAP8AAACSAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFcAAAC0AAAA2wAAANsAAAC0AAAAVwAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAACSAAAA/wAAAKwAAABJAAAADQAAAAAAAAAeAAAAqgAAAPsAAAD/AAAA5wAA
        AD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAACEAAAA+QAAAP8AAADrAAAA6wAAAP8AAAD5AAAAhAAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0AAADnAAAA/wAAAPsAAACqAAAAHgAAAKAAAAD/AAAAzgAA
        AG0AAAAzAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVwAAAPkAAADtAAAAdAAAACkAAAApAAAAdAAA
        AO0AAAD5AAAAVwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADQAAABtAAAAzgAAAP8AAACgAAAA8QAA
        APIAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAC1AAAA/wAAAHQAAAAAAAAAAAAA
        AAAAAAAAAAAAdAAAAP8AAAC1AAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAA8gAA
        APAAAAD/AAAA4gAAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAANwAAADrAAAAKQAA
        AAAAAAAAAAAAAAAAAAAAAAApAAAA6wAAANwAAAAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAADiAAAA/wAAAP8AAADiAAAAHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZAAAA3AAA
        AOsAAAAoAAAAAAAAAAAAAAAAAAAAAAAAACgAAADrAAAA3AAAABkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHwAAAOIAAAD/AAAA8QAAAPIAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAcAAAC1AAAA/wAAAHQAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAP8AAAC1AAAABwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA/AAAA8gAAAPEAAAChAAAA/wAAAM0AAABtAAAAMgAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAFgAAAD5AAAA7AAAAHQAAAAoAAAAKAAAAHQAAADsAAAA+QAAAFgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAQAAAAzAAAAbQAAAM0AAAD/AAAAoQAAAB8AAACrAAAA+wAAAP8AAADmAAAAPQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAIUAAAD5AAAA/wAAAOoAAADqAAAA/wAAAPkAAACFAAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAPQAAAOcAAAD/AAAA+wAAAKsAAAAfAAAAAAAAAA4AAABJAAAArQAA
        AP8AAACRAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAFgAAAC1AAAA3AAAANwAAAC1AAAAWAAA
        AAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACRAAAA/wAAAK0AAABJAAAADgAAAAAAAAAAAAAAAAAA
        AAAAAABAAAAA+AAAANcAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAaAAAAGgAA
        AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAANcAAAD4AAAAQAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAIUAAAD/AAAAmwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAmwAAAP8AAACFAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAASAAAA0AAAAO4AAAAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyAAAA7gAA
        ANAAAAASAAAAAAAAAAAAAAAAAAAAAAAAABcAAADZAAAA7AAAAC0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AC0AAADsAAAA2QAAABcAAAAAAAAAAAAAAAAAAAAAAAAABQAAAKcAAAD/AAAApwAAABMAAAAAAAAAAAAA
        AAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABgAAAAFAAAAAAAA
        AAAAAAATAAAApwAAAP8AAACnAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAANoAAAD/AAAApwAA
        AC0AAAApAAAAhQAAALkAAABoAAAAIAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAABAAAAD0AAACRAAAA1wAA
        AJoAAAAnAAAAHAAAAKUAAAD/AAAA2gAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPwAA
        ANoAAAD/AAAA6wAAAOoAAAD/AAAA+QAAAP8AAADSAAAAKQAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA5wAA
        AP8AAAD4AAAA/wAAAOIAAADYAAAA/wAAANoAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAANAAAAKcAAADZAAAA0QAAAIUAAABBAAAArQAAAP8AAABsAAAAAAAAAAAAAAAAAAAAAAAA
        AG0AAAD/AAAArAAAAEEAAACFAAAA0QAAANoAAACnAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAABcAAAASAAAAAAAAAAAAAABJAAAA+wAAAM0AAAA/AAAAHwAA
        AB8AAAA/AAAAzQAAAPsAAABJAAAAAAAAAAAAAAASAAAAFwAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAACrAAAA/wAA
        APIAAADiAAAA4gAAAPIAAAD/AAAAqwAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AB8AAAChAAAA8QAAAP8AAAD/AAAA8QAAAKEAAAAfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//AAAA/gAAAHwAAAA4AAAAGAAYABgAGAAYADwAGA//8BgPAPAQDA
        AwAAwAMAAIABAACAAQABgAGAB4AB4AeAAeABgAGAAIABAACAAQAAwAMAAMADAIDwDwGA//8BgAfAAYAB
        gAGAAYABgAAAAcAAAAPgAAAH8AAAD//AA/8=
</value>
  </data>
</root>